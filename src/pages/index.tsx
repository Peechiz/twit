import Head from "next/head";
import {
  UserButton,
  SignInButton,
  SignedIn,
  SignedOut,
  useUser,
} from "@clerk/nextjs";

import { api } from "@/utils/api";
import type { RouterOutputs } from "@/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage } from "@/components/spinner";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const user = useUser();

  if (!user) return null;

  return (
    <>
      <input
        type="text"
        placeholder="type some emoji!"
        className="grow bg-transparent outline-none"
      />
    </>
  );
};

type PostWithAuthor = RouterOutputs["post"]["getAll"][number];
const PostView = ({ post, author }: PostWithAuthor) => {
  return (
    <div className="flex gap-4 border-b border-slate-400 p-4" key={post.id}>
      <Image
        src={author.profilePicture}
        alt={`@${author.username}'s profile picture`}
        className="h-10 w-10 rounded-full"
        width={56}
        height={56}
      />
      <div className="flex flex-col ">
        <div className="flex gap-1 text-slate-400">
          <span>{`@${author.username}`}</span>
          <span className="font-thin">{` Â· ${dayjs(post.createdAt).fromNow()}`}</span>
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.post.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;
  if (!data) return <div>Something went wrong...</div>;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView key={fullPost.post.id} {...fullPost} />
      ))}
    </div>
  );
};

export default function Home() {
  const { data, isLoading } = api.post.getAll.useQuery();

  if (isLoading) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <header className="flex gap-4  border-b border-slate-400 p-4">
            <SignedIn>
              {/* Mount the UserButton component */}
              <UserButton
                appearance={{
                  elements: {
                    avatarBox: {
                      width: "3.5rem",
                      height: "3.5rem",
                    },
                  },
                }}
              />
            </SignedIn>
            <SignedOut>
              {/* Signed out users get sign in button */}
              <SignInButton />
            </SignedOut>
            {!!data && <CreatePostWizard />}
          </header>
          <Feed />
        </div>
      </main>
    </>
  );
}
